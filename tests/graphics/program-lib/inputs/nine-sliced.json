{
    "fog": "none",
    "gamma": 0,
    "toneMap": -1,
    "blendMapsWithColors": true,
    "ambientTint": false,
    "diffuseTint": 3,
    "specularTint": 0,
    "metalnessTint": 0,
    "glossTint": 1,
    "emissiveTint": 3,
    "opacityTint": 1,
    "alphaTest": false,
    "alphaToCoverage": false,
    "needsNormalFloat": true,
    "sphereMap": false,
    "cubeMap": false,
    "dpAtlas": false,
    "ambientSH": false,
    "useSpecular": false,
    "rgbmAmbient": false,
    "rgbmReflection": false,
    "hdrAmbient": false,
    "hdrReflection": false,
    "fixSeams": false,
    "prefilteredCubemap": false,
    "emissiveFormat": 0,
    "lightMapFormat": null,
    "useRgbm": 0,
    "specularAntialias": false,
    "conserveEnergy": true,
    "occludeSpecular": 1,
    "occludeSpecularFloat": false,
    "occludeDirect": false,
    "shadingModel": 1,
    "fresnelModel": 0,
    "packedNormal": false,
    "forceFragmentPrecision": null,
    "fastTbn": false,
    "cubeMapProjection": 0,
    "chunks": {
        "uv0VS": "#ifndef NINESLICE\n#define NINESLICE\nuniform vec4 innerOffset;\nuniform vec2 outerScale;\nuniform vec4 atlasRect;\nvarying vec2 vTiledUv;\n#endif\nvarying vec2 vMask;\nvec2 getUv0() {\n    vec2 uv = vertex_position.xz;\n    // offset inner vertices inside\n    // (original vertices must be in [-1;1] range)\n    vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\n    vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\n    uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\n    uv = uv * -0.5 + 0.5;\n    uv = uv * atlasRect.zw + atlasRect.xy;\n    vMask = vertex_texCoord0.xy;\n    return uv;\n}\n"
    },
    "customFragmentShader": null,
    "refraction": false,
    "useMetalness": false,
    "blendType": 4,
    "forceUv1": false,
    "useTexCubeLod": false,
    "msdf": false,
    "twoSidedLighting": false,
    "pixelSnap": false,
    "pass": 0,
    "noShadow": false,
    "screenSpace": false,
    "skin": false,
    "useInstancing": false,
    "emissiveMap": true,
    "emissiveMapTransform": 0,
    "emissiveMapChannel": "rgb",
    "emissiveMapUv": 0,
    "opacityMap": true,
    "opacityMapTransform": 0,
    "opacityMapChannel": "a",
    "opacityMapUv": 0,
    "lights": [],
    "aoMapUv": 0,
    "nineSlicedMode": 1
}
